# ===== 智能路由系统环境变量配置 =====
# 基于 LangChain 的智能模型路由和动态切换系统
# 文档: https://github.com/langchain-ai/langchain-nextjs-template

# ===== 基础配置 =====
# 应用基础信息
VERCEL_APP_URL="https://localhost:3000"
APP_TITLE="LangChain 智能路由系统"

# ===== 模型 API 密钥配置 =====
# 注意: 至少配置一个模型 API 密钥，系统会自动检测可用模型

# --- 1. Google Gemini (推荐: 成本低、速度快) ---
GOOGLE_API_KEY="your-google-api-key"
# 可选: 自定义 Base URL
# GOOGLE_BASE_URL="https://generativelanguage.googleapis.com"

# --- 2. OpenAI (功能全面) ---
OPENAI_API_KEY="your-openai-api-key"
OPENAI_BASE_URL=""  # 可选: 自定义 Base URL

# --- 3. DeepSeek (中文友好、推理能力强) ---
DEEPSEEK_API_KEY="your-deepseek-api-key"

# --- 4. 阿里云通义千问 (中文优化) ---
DASHSCOPE_API_KEY="your-dashscope-api-key"

# --- 5. 自定义 OpenAI 兼容提供商 ---
# 示例: Neko API (支持多种模型)
NEKO_API_KEY="your-neko-api-key"
NEKO_BASE_URL="your-neko-base-url"

# 示例: 其他 OpenAI 兼容提供商
O3_API_KEY="your-o3-api-key"
O3_BASE_URL="your-o3-base-url"

# OpenRouter (多模型聚合)
OPENROUTER_API_KEY="your-openrouter-api-key"
OPENROUTER_BASE_URL="https://openrouter.ai/api/v1"

# --- 6. 其他模型提供商 ---
# Tencent Hunyuan
TENCENT_HUNYUAN_SECRET_ID="your-tencent-secret-id"
TENCENT_HUNYUAN_SECRET_KEY="your-tencent-secret-key"

# Cloudflare Workers AI
CLOUDFLARE_API_TOKEN="your-cloudflare-api-token"
CLOUDFLARE_ACCOUNT_ID="your-cloudflare-account-id"

# ===== 智能路由系统配置 =====
# 路由系统功能开关
ENABLE_INTELLIGENT_ROUTING="true"
ENABLE_MODEL_SWITCHING="true"
ENABLE_PERFORMANCE_MONITORING="true"

# 路由决策配置
ROUTING_CONFIDENCE_THRESHOLD="0.7"
ROUTING_FALLBACK_MODEL="gemini-flash-lite"
ROUTING_CACHE_TTL="300"  # 路由缓存时间(秒)

# 模型选择策略权重
MODEL_SELECTION_CAPABILITY_WEIGHT="0.4"
MODEL_SELECTION_COST_WEIGHT="0.3"
MODEL_SELECTION_PERFORMANCE_WEIGHT="0.3"

# ===== 高级功能配置 =====

# --- 网络搜索功能 ---
TAVILY_API_KEY="your-tavily-api-key"
SERPAPI_API_KEY="your-serpapi-api-key"
BING_SEARCH_API_KEY="your-bing-search-api-key"

# --- RAG 检索功能 ---
# Supabase (推荐)
SUPABASE_URL="your-supabase-url"
SUPABASE_SERVICE_ROLE_KEY="your-supabase-service-role-key"
SUPABASE_TABLE_NAME="documents"

# Pinecone (云向量数据库)
PINECONE_API_KEY="your-pinecone-api-key"
PINECONE_ENVIRONMENT="your-pinecone-environment"
PINECONE_INDEX_NAME="langchain-chat-index"

# Chroma (本地向量数据库)
CHROMA_COLLECTION_NAME="chat-documents"
CHROMA_SERVER_URL="http://localhost:8000"
CHROMA_PERSIST_DIRECTORY="./chroma-data"

# --- 向量嵌入配置 ---
# OpenAI Embeddings
OPENAI_EMBEDDINGS_MODEL="text-embedding-3-large"
OPENAI_EMBEDDINGS_DIMENSIONS="1024"

# Cloudflare Embeddings
CLOUDFLARE_EMBEDDING_MODEL="@cf/baai/bge-m3"

# ===== OpenAI 兼容 API 配置 =====
# 启用 OpenAI 兼容 API 端点
ENABLE_OPENAI_COMPATIBLE_API="true"

# API 密钥验证配置
ENABLE_API_AUTH="true"

# 方式1: 多个 API 密钥 (逗号分隔)
LANGCHAIN_API_KEYS="sk-langchain-key1,sk-langchain-key2,sk-langchain-key3"

# 方式2: 编号的单独密钥 (支持1-10)
LANGCHAIN_API_KEY_1="sk-langchain-user-key-1"
LANGCHAIN_API_KEY_2="sk-langchain-user-key-2"
LANGCHAIN_API_KEY_3="sk-langchain-user-key-3"

# 方式3: 单个默认密钥
LANGCHAIN_API_KEY="sk-langchain-default-key"

# 管理员密钥 (拥有所有权限)
LANGCHAIN_ADMIN_KEY="sk-langchain-admin-super-secret"

# ===== 智能代理配置 =====
# 代理执行配置
AGENT_MAX_ITERATIONS="10"
AGENT_MAX_EXECUTION_TIME="30"  # 秒
AGENT_VERBOSE="false"

# 工具配置
ENABLE_AGENT_TOOLS="true"
PYTHON_REPL_ENABLED="false"
SANDBOX_ENVIRONMENT="docker"  # docker, local, none

# 数学计算工具
WOLFRAM_ALPHA_APP_ID="your-wolfram-alpha-app-id"

# ===== 结构化输出配置 =====
STRUCTURED_OUTPUT_ENABLED="true"
STRUCTURED_OUTPUT_VALIDATION="true"
STRUCTURED_OUTPUT_MAX_RETRIES="3"

# ===== 检索配置 =====
RETRIEVAL_TOP_K="5"
RETRIEVAL_SCORE_THRESHOLD="0.7"
RETRIEVAL_SEARCH_TYPE="similarity"  # similarity, mmr, similarity_score_threshold
RETRIEVAL_FETCH_K="20"

# 文档处理配置
DOCUMENT_CHUNK_SIZE="1000"
DOCUMENT_CHUNK_OVERLAP="200"
DOCUMENT_MAX_FILE_SIZE="10485760"  # 10MB

# ===== 内存和持久化配置 =====
ENABLE_MEMORY="true"
MEMORY_PROVIDER="buffer"  # buffer, summary, token_buffer, conversation_kg
MEMORY_MAX_TOKEN_LIMIT="4000"
MEMORY_RETURN_MESSAGES="true"

# LangGraph 状态持久化
DATABASE_URL="postgresql://user:password@host:port/database?schema=public"
REDIS_URL="redis://localhost:6379/0"

# ===== 监控和日志配置 =====
# LangSmith 追踪 (强烈推荐)
LANGCHAIN_TRACING_V2="true"
LANGCHAIN_API_KEY="your-langsmith-api-key"
LANGCHAIN_PROJECT="langchain-intelligent-routing"
LANGSMITH_ENDPOINT="https://api.smith.langchain.com"

# 应用日志配置
LOG_LEVEL="info"  # debug, info, warn, error
LOG_FORMAT="json"  # json, text
ENABLE_REQUEST_LOGGING="true"

# 性能监控
ENABLE_PERFORMANCE_METRICS="true"
METRICS_ENDPOINT="/api/metrics"

# ===== 性能和限制配置 =====
# 并发和超时
MAX_CONCURRENT_REQUESTS="10"
REQUEST_TIMEOUT="30000"  # 毫秒
RATE_LIMIT_REQUESTS_PER_MINUTE="60"

# 缓存配置
ENABLE_RESPONSE_CACHE="false"
CACHE_TTL="3600"  # 秒
CACHE_PROVIDER="memory"  # memory, redis, none
REDIS_CACHE_URL="redis://localhost:6379/1"

# ===== 安全配置 =====
# CORS 配置
ENABLE_CORS="true"
ALLOWED_ORIGINS="http://localhost:3000,https://your-domain.com"

# API 认证
API_KEY_HEADER="X-API-Key"
API_SECRET_KEY="your-secret-key"

# ===== 功能开关 =====
# 核心功能
ENABLE_VISION_PROCESSING="true"
ENABLE_WEB_SEARCH="true"
ENABLE_DOCUMENT_RETRIEVAL="true"
ENABLE_STRUCTURED_OUTPUT="true"
ENABLE_AGENT_TOOLS="true"
ENABLE_COMPLEX_REASONING="true"

# 语言优化
ENABLE_CHINESE_OPTIMIZATION="true"
ENABLE_MULTILINGUAL_SUPPORT="true"

# 高级功能
ENABLE_MODEL_FALLBACK="true"
ENABLE_AUTOMATIC_RETRIES="true"
ENABLE_CONTEXT_AWARENESS="true"

# ===== 开发和测试配置 =====
NODE_ENV="development"  # development, production, test
DEBUG_MODE="false"
MOCK_API_RESPONSES="false"
TEST_API_KEY="test-key-for-development"

# 开发工具
ENABLE_BUNDLE_ANALYZER="false"
ENABLE_PERFORMANCE_PROFILING="false"

# ===== 部署配置 =====
# 生产环境配置
LANGCHAIN_CALLBACKS_BACKGROUND="false"  # Vercel Edge Functions 要求
VERCEL_ENV="production"  # Vercel 自动设置

# 健康检查
ENABLE_HEALTH_CHECK="true"
HEALTH_CHECK_ENDPOINT="/api/health"

# ===== 智能路由系统使用说明 =====
# 
# 🚀 快速开始:
# 1. 至少配置一个模型 API 密钥
# 2. 运行: npm run dev
# 3. 访问: http://localhost:3000
# 
# 🔧 添加新模型:
# 方式1: npm run add-model (交互式)
# 方式2: 编辑 models-config.json
# 方式3: 访问 /admin/models 管理界面
# 
# 🧪 测试系统:
# npm run test-router
# 
# 📚 详细文档:
# 查看 README.md 和 INTELLIGENT-ROUTER.md
# 
# ===== 推荐的最小配置 =====
# 
# # 基础配置 (选择一个)
# GOOGLE_API_KEY="your-google-api-key"     # 推荐: 成本低
# # 或
# OPENAI_API_KEY="your-openai-api-key"     # 功能全面
# # 或  
# DEEPSEEK_API_KEY="your-deepseek-api-key" # 中文友好
# 
# # 可选功能
# TAVILY_API_KEY="your-tavily-api-key"     # 网络搜索
# SUPABASE_URL="your-supabase-url"         # RAG 检索
# LANGCHAIN_API_KEY="your-langsmith-key"   # 监控追踪
# 
# ===== 高级配置示例 =====
# 
# # 多模型配置 (获得最佳性能)
# GOOGLE_API_KEY="your-google-api-key"     # 搜索、速度
# DEEPSEEK_API_KEY="your-deepseek-api-key" # 推理、中文
# OPENAI_API_KEY="your-openai-api-key"     # 视觉、工具
# NEKO_API_KEY="your-neko-api-key"         # Claude 等高级模型
# 
# # 完整功能配置
# TAVILY_API_KEY="your-tavily-api-key"     # 网络搜索
# SUPABASE_URL="your-supabase-url"         # RAG 检索
# LANGCHAIN_API_KEY="your-langsmith-key"   # 监控追踪
# 
# ===== 故障排除 =====
# 
# 🔍 常见问题:
# 1. 模型不可用: 检查 API 密钥是否正确
# 2. 路由不准确: 运行 npm run test-router 检查
# 3. 性能问题: 启用缓存和监控
# 
# 🛠️ 调试命令:
# npm run models:list    # 查看可用模型
# npm run test-router    # 测试路由系统
# npm run models:reload  # 重新加载配置
# 
# 📊 监控:
# 访问 /admin/models 查看模型状态
# 查看控制台日志了解路由决策
